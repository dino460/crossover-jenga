//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input Manager/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""0d125edf-7dce-432e-bffa-5bc3b4cd05c5"",
            ""actions"": [
                {
                    ""name"": ""MoveToNext"",
                    ""type"": ""Button"",
                    ""id"": ""9be8459a-b0bf-429d-917d-3a52e059e0ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveToPrevious"",
                    ""type"": ""Button"",
                    ""id"": ""0d4feefb-b2c0-44a9-9a90-f20fa81515e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnablePhysics"",
                    ""type"": ""Button"",
                    ""id"": ""a3fe5b74-2c1e-4c01-be66-7a426af0e668"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""22dbb744-a780-4a06-9ae2-5912566b1350"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""940a5a22-e2be-4e35-90aa-dfaf9499d360"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""69766dbf-9482-4d38-8f7e-8140a2d38655"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveToNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbdad10b-9119-4608-a2f7-a16f2bab6ab4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveToPrevious"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c69d935-05aa-429c-aa91-bbf902901c62"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnablePhysics"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28876d9c-64ba-487e-b9d1-a3daf0350e0d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acaf27f8-7110-4f96-a46a-748821197f64"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_MoveToNext = m_Main.FindAction("MoveToNext", throwIfNotFound: true);
        m_Main_MoveToPrevious = m_Main.FindAction("MoveToPrevious", throwIfNotFound: true);
        m_Main_EnablePhysics = m_Main.FindAction("EnablePhysics", throwIfNotFound: true);
        m_Main_Mouse = m_Main.FindAction("Mouse", throwIfNotFound: true);
        m_Main_Select = m_Main.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_MoveToNext;
    private readonly InputAction m_Main_MoveToPrevious;
    private readonly InputAction m_Main_EnablePhysics;
    private readonly InputAction m_Main_Mouse;
    private readonly InputAction m_Main_Select;
    public struct MainActions
    {
        private @InputManager m_Wrapper;
        public MainActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveToNext => m_Wrapper.m_Main_MoveToNext;
        public InputAction @MoveToPrevious => m_Wrapper.m_Main_MoveToPrevious;
        public InputAction @EnablePhysics => m_Wrapper.m_Main_EnablePhysics;
        public InputAction @Mouse => m_Wrapper.m_Main_Mouse;
        public InputAction @Select => m_Wrapper.m_Main_Select;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @MoveToNext.started += instance.OnMoveToNext;
            @MoveToNext.performed += instance.OnMoveToNext;
            @MoveToNext.canceled += instance.OnMoveToNext;
            @MoveToPrevious.started += instance.OnMoveToPrevious;
            @MoveToPrevious.performed += instance.OnMoveToPrevious;
            @MoveToPrevious.canceled += instance.OnMoveToPrevious;
            @EnablePhysics.started += instance.OnEnablePhysics;
            @EnablePhysics.performed += instance.OnEnablePhysics;
            @EnablePhysics.canceled += instance.OnEnablePhysics;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @MoveToNext.started -= instance.OnMoveToNext;
            @MoveToNext.performed -= instance.OnMoveToNext;
            @MoveToNext.canceled -= instance.OnMoveToNext;
            @MoveToPrevious.started -= instance.OnMoveToPrevious;
            @MoveToPrevious.performed -= instance.OnMoveToPrevious;
            @MoveToPrevious.canceled -= instance.OnMoveToPrevious;
            @EnablePhysics.started -= instance.OnEnablePhysics;
            @EnablePhysics.performed -= instance.OnEnablePhysics;
            @EnablePhysics.canceled -= instance.OnEnablePhysics;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnMoveToNext(InputAction.CallbackContext context);
        void OnMoveToPrevious(InputAction.CallbackContext context);
        void OnEnablePhysics(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
}
